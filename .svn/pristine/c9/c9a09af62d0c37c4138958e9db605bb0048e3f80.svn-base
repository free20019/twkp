package com.twkj.dao;

import org.apache.ibatis.annotations.*;

import java.text.SimpleDateFormat;
import java.util.*;

/**
 * @author: xianlehuang
 * @Description:
 * @date: 2019/12/4 - 10:19
 */
public interface UserDao {

    @Select("select * from tb_power_web order by id")
    public List<Map<String, Object>> power();

    @Select("select u.*, p.POST_NAME, p.POWER_ID, p.POWER_NAME,d.department from tb_kp_user u " +
            " left join TB_POST_WEB p on u.POST_ID=p.id" +
            " left join tb_kp_department d on d.id=u.department_id" +
            " where u.lzzt=0 and u.loginname = #{loginname} and u.password = #{password}")
    List<Map<String, Object>> login(Map<String, Object> map);

//    @Select("select * from TB_POST_WEB where post_name = #{post_name} and power_id = #{power_id} and power_name = #{power_name}")
    @SelectProvider(type =UserSql.class, method = "findPost")
    List<Map<String, Object>> findPost(Map<String, Object> map);

    @Insert("insert into TB_POST_WEB (post_name, power_id, power_name) values (#{post_name}, #{power_id}, #{power_name})")
    Integer addPost(Map<String, Object> map);

    @Update("update TB_POST_WEB set  post_name=#{post_name}, power_id=#{power_id}, power_name=#{power_name} where id=#{id} ")
    Integer updatePost(Map<String, Object> map);

    @Delete("delete from TB_POST_WEB where id=#{id}")
    int deletePost(Map<String, Object> map);

    @Select("select * from tb_kp_department order by id")
    List<Map<String, Object>> department();

    @SelectProvider(type =UserSql.class, method = "findUser")
    List<Map<String, Object>> findUser(Map<String, Object> map);

//    @Insert("insert into tb_kp_user (department_id, username, password, post_id, loginname, power, userid) values (#{department_id}, #{username}, #{password}, #{post_id}, #{loginname}, #{power}, (select case when (select count(*) from tuser where username=#{username}) =1 then (select userid from tuser where username=#{username}) when (select count(*) from tb_kp_user) >0 then (select  to_char(max(userid)+1) from tb_kp_user) else '1' END from dual))")
    @Insert("insert into tb_kp_user (department_id, username, password, post_id, loginname, power, userid) values (#{department_id}, #{username}, #{password}, #{post_id}, #{loginname}, #{power}, #{userid})")
    int addUser(Map<String, Object> map);

//    @Update("update tb_kp_user set department_id=#{department_id}, username=#{username}, password=#{password}, post_id=#{post_id}, loginname=#{loginname} , power=#{power}, userid=(select case when (select count(*) from tuser where username=#{username}) =1 then (select userid from tuser where username=#{username}) when (select count(*) from tb_kp_user) >0 then (select  to_char(max(userid)+1) from tb_kp_user) else '1' END from dual) where id=#{id} ")
    @Update("update tb_kp_user set department_id=#{department_id}, username=#{username}, password=#{password}, post_id=#{post_id}, loginname=#{loginname} , power=#{power}, userid=#{userid} where id=#{id} ")
    int updateUser(Map<String, Object> map);

    @Delete("delete from tb_kp_user where id=#{id}")
    int deleteUser(Map<String, Object> map);

    @Update("update tb_kp_user set lzzt=#{lzzt} where id=#{id} ")
    int auditUserStatus(Map<String, Object> map);

    @SelectProvider(type =UserSql.class, method = "findDaily1")
    List<LinkedHashMap<String, Object>> findDaily1(Map<String, Object> map);

    @SelectProvider(type =UserSql.class, method = "findDaily2")
    List<LinkedHashMap<String, Object>> findDaily2(Map<String, Object> map);

    @Select("select distinct to_char(holiday_date,'yyyyMMdd') DAY from oa_holiday where (type='1' or type='3')  and holiday_date >=to_date('${time}01','yyyyMMdd') and holiday_date <=to_date('${time}${maxDate}','yyyyMMdd')  ORDER BY to_char(holiday_date, 'yyyyMMdd')")
    List<Map<String, Object>> findHoliday(Map<String, Object> map);

    @Select("select distinct a.BM, a.CODE, b.bm pbm,b.code pcode from tb_bm a left join tb_bm b on b.code=a.parent order by a.BM")
    List<Map<String, Object>> getDepartment();

    @SelectProvider(type =UserSql.class, method = "monthlyCheck")
    List<LinkedHashMap<String, Object>> monthlyCheck(Map<String, Object> map);

    @SelectProvider(type =UserSql.class, method = "monthlyFieldWork")
    List<LinkedHashMap<String, Object>> monthlyFieldWork(Map<String, Object> map);

    @Insert("insert into tuser (username, loginname, password, bm, xxbm, qx, permission, gw) values (#{username}, #{loginname}, #{password}, #{bm}, #{xxbm}, #{qx}, #{permission}, #{gw})")
    int addAppUser(Map<String, Object> map);

    @Update("update tuser set username=#{username}, loginname=#{loginname}, password=#{password}, bm=#{bm}, xxbm=#{xxbm}, qx=#{qx}, permission=#{permission}, gw=#{gw} where id=#{id} ")
    int updateAppUser(Map<String, Object> map);

    @Delete("delete from tuser where id=#{id}")
    int deleteAppUser(Map<String, Object> map);

    @SelectProvider(type =UserSql.class, method = "findAppUser")
    List<Map<String, Object>> findAppUser(Map<String, Object> map);

    @Update("update tuser set lzzt=#{lzzt} where id=#{id} ")
    int auditAppUserStatus(Map<String, Object> map);

    @Select("select distinct a.xxbm department from tuser a where a.lzzt=0 order by a.xxbm")
    List<Map<String, Object>> findAppDepartment();

    @Select("select * from ${table} where userid=#{userid} and to_char(${time},'yyyy-MM-dd') = to_char(sysdate,'yyyy-MM-dd') ")
    List<Map<String, Object>> findSign(Map<String, Object> map);

    @Insert("insert into tb_signin (username, qddz, jd, wd, userid, qdtime, yeartime, hourtime, db_time)" +
            " values (#{username}, #{qddz}, #{jd}, #{wd}, #{userid}, sysdate, to_char(sysdate,'yyyyMMdd'),to_char(sysdate,'hh24miss'),sysdate-1/24/60/60*${xs})")
    int signin(Map<String, Object> map);

    @Insert("insert into tb_signout (username, qtdz, jd, wd, userid, qttime, yeartime, hourtime, db_time)" +
            " values (#{username}, #{qtdz}, #{jd}, #{wd}, #{userid}, sysdate, to_char(sysdate,'yyyyMMdd'),to_char(sysdate,'hh24miss'),sysdate-1/24/60/60*${xs})")
    int signout(Map<String, Object> map);

//    @Insert("insert into OA_TB_SZ (SBTIME, XBTIME, FW, LONGI, LATI, BM, ID) values (#{stime}, #{etime}, #{range}, #{longi}, #{lati}, #{department}" +
//            ", (select case when (select count(1) from OA_TB_SZ)>0 then (select max(id)+1 from OA_TB_SZ) else 1 end from dual) )")
    @Insert("insert into TB_SZ (SBTIME, XBTIME, FW, LONGI, LATI, BM, XXBM) values (#{stime}, #{etime}, #{range}, #{longi}, #{lati}, 100108, #{department})")
    int addCheckAttendance(Map<String, Object> map);

    @Update("update tb_sz set SBTIME=#{stime}, XBTIME=#{etime}, FW= #{range}, LONGI=#{longi}, LATI=#{lati}, BM=100108, XXBM=#{department} where id=#{id}")
    int updateCheckAttendance(Map<String, Object> map);

//    @Delete("delete from tb_sz where xxbm in (${department})")
    @Delete("delete from tb_sz where id in (${id})")
    Integer deleteCheckAttendance(Map<String, Object> map);

    @Select("<script>" +
            " select * from tb_sz " +
            " <if test='department!=null and department!=\"\"'> where xxbm = #{department}</if>" +
            " order by ID" +
            " </script>")
    List<Map<String, Object>> findCheckAttendance(Map<String, Object> map);

    @Select("select distinct xxbm department from tuser where xxbm is not null")
    List<Map<String, Object>> findAttendanceDepartment();

    class UserSql{
        public String findPost(Map<String, Object> map){
            String post_name = String.valueOf(map.get("post_name")).replaceAll("'","''");
            String power_id = String.valueOf(map.get("power_id")).replaceAll("'","''");
            String power_name = String.valueOf(map.get("power_name")).replaceAll("'","''");
            String tj="";
            if(post_name!=null&&!post_name.isEmpty()&&!"null".equals(post_name) &&post_name.length()>0){
                tj += " and a.post_name like '%"+post_name+"%'";
            }
            if(power_id!=null&&!power_id.isEmpty()&&!"null".equals(power_id) &&power_id.length()>0){
                tj += " and a.power_id like '%"+power_id+"%'";
            }
            if(power_name!=null&&!power_name.isEmpty()&&!"null".equals(power_name) &&power_name.length()>0){
                tj += " and a.power_name like '%"+power_name+"%'";
            }
            String sql = "select * from TB_POST_WEB a where 1=1";
            sql += tj;
            sql +=" order by a.post_name";
            return sql;
        }
        public String findUser(Map<String, Object> map){
            String username = String.valueOf(map.get("username")).replaceAll("'","''");
            String department = String.valueOf(map.get("department")).replaceAll("'","''");
            String lzzt = String.valueOf(map.get("lzzt")).replaceAll("'","''");
            String tj="";
            if(username!=null&&!username.isEmpty()&&!"null".equals(username) &&username.length()>0){
                tj += " and a.username like '%"+username+"%'";
            }
            if(department!=null&&!department.isEmpty()&&!"null".equals(department) &&department.length()>0){
                tj += " and d.department like '%"+department+"%'";
            }
            if(lzzt!=null&&!lzzt.isEmpty()&&!"null".equals(lzzt) &&lzzt.length()>0){
                tj += " and a.lzzt like '%"+lzzt+"%'";
            }
            String sql = "select a.*,d.department,p.post_name from TB_KP_USER a" +
                    " left join tb_kp_department d on a.department_id=d.id" +
                    " left join TB_POST_WEB p on p.id=a.post_id" +
                    " where 1=1";
            sql += tj;
            sql +=" order by a.username";
            return sql;
        }

        public String findDaily1(Map<String, Object> map) {
            String username = String.valueOf(map.get("username")).replaceAll("'","''");
            String department = String.valueOf(map.get("department")).replaceAll("'","''");
            String time = String.valueOf(map.get("time")).replaceAll("'","''");
            String tj = "";
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            if (username != null && !username.isEmpty() && !"null".equals(username) && username.length() > 0) {
                tj += " and u.USERNAME like '%" + username + "%'";
            }
            if (department != null && !department.isEmpty() && !"null".equals(department) && department.length() > 0) {
                tj += " and u.bm = '" + department + "'";
            }
            String sql1 = "";
            int maxDate = 0;
            if (time != null && !time.isEmpty() && !"null".equals(time) && time.length() > 0) {
                String[] year_month = time.split("-");
                Calendar cal = Calendar.getInstance();
                int year = Integer.parseInt(year_month[0]);
                int month = Integer.parseInt(year_month[1]) - 1;
                cal.set(Calendar.YEAR, year);
                cal.set(Calendar.MONTH, month);
                cal.set(Calendar.DATE, 1);
                cal.roll(Calendar.DATE, -1);
                maxDate = cal.get(Calendar.DATE);
                //上午
                sql1 += "select distinct * from (select  u.USERID, u.USERNAME, u.BM, u.gw ,case when 1=1 then 1 end type from tuser u where u.lzzt=0 ";
                sql1 += tj;
                sql1 += " ) u";
                for (int i = 1; i <= maxDate; i++) {
                    int m = i;
                    sql1 += " left join (select distinct u.USERID,s.qd qd" + m + ", j.jbnr jb" + m + ", q.qjtype qj" + m + " , w.BGTIME bg" + m + " from tuser u" +
                            " left join tb_bm b on u.bm=b.code " +
                            " left join (select s.*,case when z.sbtime>=to_char(s.QDTIME-1/24/60,'hh24miss') then '正常' else '不正常' end qd from tb_signin s,TB_SZ z, tuser u where s.USERID=u.USERID and u.BM=z.BM) s" +
                            "  on s.USERID=u.USERID and to_char(s.QDTIME,'yyyy-MM-fmdd')='" + time + "-" + m + "'" +
                            "  and not exists(select 1 from tb_signin where s.USERID = USERID AND to_char(QDTIME,'yyyy-MM-fmdd')='" + time + "-" + m + "' and s.QDTIME>QDTIME)" +
                            " left join TB_JB j on j.USERID=u.USERID and to_char(j.JBKSTIME,'yyyy-MM-fmdd')='" + time + "-" + m + "' and to_char(j.JBKSTIME,'hh24miss') <= '120000' and j.SQJG=1" +
                            "  and not exists(select 1 from TB_JB where j.USERID = USERID AND to_char(JBKSTIME,'yyyy-MM-fmdd')='" + time + "-" + m + "' and to_char(JBKSTIME,'hh24miss') <= '120000' and SQJG=1 and j.JBKSTIME<JBKSTIME)" +
                            " left join TB_QJSC q on q.USERID=u.USERID and to_date('" + time + "-" + m + " 120000','yyyy-MM-fmdd hh24miss')>=q.QJKSTIME and to_date('" + time + "-" + m + " 000000','yyyy-MM-fmdd hh24miss')<=q.QJJSTIME and q.SQJG=1 " +
                            "  and not exists(select 1 from TB_QJSC where q.USERID = USERID AND to_date('" + time + "-" + m + " 120000','yyyy-MM-fmdd hh24miss')>=QJKSTIME and to_date('" + time + "-" + m + " 000000','yyyy-MM-fmdd hh24miss')<=QJJSTIME and SQJG=1 and q.QJKSTIME<QJKSTIME)" +
                            " left join (select BGTIME,USERID from  TB_WQBGSC where SQJG=1) w on w.USERID=u.USERID and to_char(w.BGTIME, 'yyyy-MM-fmdd')='" + time + "-" + m + "'" +
                            "  and not exists(select 1 from TB_WQBGSC where w.USERID = USERID AND to_char(BGTIME,'yyyy-MM-fmdd')='" + time + "-" + m + "' and SQJG=1 and w.BGTIME<BGTIME)" +
                            " where 1=1 ";
                    sql1 += tj;
                    sql1 += ") d" + m + " on u.USERID=d" + m + ".USERID";
                }
                sql1 += " order by u.bm,nlssort(u.username,'NLS_SORT=SCHINESE_PINYIN_M')";
            }
            return sql1;
        }

        public String findDaily2(Map<String, Object> map) {
            String username = String.valueOf(map.get("username")).replaceAll("'","''");
            String department = String.valueOf(map.get("department")).replaceAll("'","''");
            String time = String.valueOf(map.get("time")).replaceAll("'","''");
            String tj = "";
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            if (username != null && !username.isEmpty() && !"null".equals(username) && username.length() > 0) {
                tj += " and u.USERNAME like '%" + username + "%'";
            }
            if (department != null && !department.isEmpty() && !"null".equals(department) && department.length() > 0) {
                tj += " and u.bm = '" + department + "'";
            }
            String sql2 = "";
            int maxDate = 0;
            if (time != null && !time.isEmpty() && !"null".equals(time) && time.length() > 0) {
                String[] year_month = time.split("-");
                Calendar cal = Calendar.getInstance();
                int year = Integer.parseInt(year_month[0]);
                int month = Integer.parseInt(year_month[1]) - 1;
                cal.set(Calendar.YEAR, year);
                cal.set(Calendar.MONTH, month);
                cal.set(Calendar.DATE, 1);
                cal.roll(Calendar.DATE, -1);
                maxDate = cal.get(Calendar.DATE);
                //下午
                sql2 += "select distinct * from (select  u.USERID, u.USERNAME, u.BM, u.gw ,case when 1=1 then 2 end type from tuser u where u.lzzt=0";
                sql2 += tj;
                sql2 += " ) u";
                for (int i = 1; i <= maxDate; i++) {
                    int m = i;
                    sql2 += " left join (select distinct u.USERID,s.qd qd" + m + ", j.jbnr jb" + m + ", q.qjtype qj" + m + " , w.BGTIME bg" + m + " from tuser u" +
                            " left join tb_bm b on u.bm=b.code " +
                            " left join (select s.*,case when z.xbtime<=to_char(s.QTTIME,'hh24miss') then '正常' else '不正常' end qd from tb_signout s,TB_SZ z, tuser u where s.USERID=u.USERID and u.BM=z.BM) s" +
                            "  on s.USERID=u.USERID and to_char(s.QTTIME,'yyyy-MM-fmdd')='" + time + "-" + m + "'" +
                            "  and not exists(select 1 from tb_signout where s.USERID = USERID AND to_char(QTTIME,'yyyy-MM-fmdd')='" + time + "-" + m + "' and s.QTTIME<QTTIME)" +
                            " left join TB_JB j on j.USERID=u.USERID and to_char(j.JBJSTIME,'yyyy-MM-fmdd')='" + time + "-" + m + "' and to_char(j.JBJSTIME,'hh24miss') > '133000' and j.SQJG=1 " +
                            "  and not exists(select 1 from TB_JB where j.USERID = USERID AND to_char(JBJSTIME,'yyyy-MM-fmdd')='" + time + "-" + m + "' and to_char(JBJSTIME,'hh24miss') > '133000' and SQJG=1  and j.JBJSTIME<JBJSTIME)" +
                            " left join TB_QJSC q on q.USERID=u.USERID and to_date('" + time + "-" + m + " 133000','yyyy-MM-fmdd hh24miss')<q.QJJSTIME and to_date('" + time + "-" + m + " 235959','yyyy-MM-fmdd hh24miss')>q.QJKSTIME and q.SQJG=1 " +
                            "  and not exists(select 1 from TB_QJSC where q.USERID = USERID AND to_date('" + time + "-" + m + " 133000','yyyy-MM-fmdd hh24miss')<QJJSTIME and to_date('" + time + "-" + m + " 235959','yyyy-MM-fmdd hh24miss')>QJKSTIME and SQJG=1 and q.QJKSTIME<QJKSTIME)" +
                            " left join (select BGTIME,USERID from TB_WQBGSC where SQJG=1 ) w on w.USERID=u.USERID and to_char(w.BGTIME, 'yyyy-MM-fmdd') ='" + time + "-" + m + "'" +
                            "  and not exists(select 1 from TB_WQBGSC where w.USERID = USERID AND to_char(BGTIME,'yyyy-MM-fmdd')='" + time + "-" + m + "' and SQJG=1 and w.BGTIME<BGTIME)" +
                            " where 1=1 ";
                    sql2 += tj;
                    sql2 += " ) d" + m + " on u.USERID=d" + m + ".USERID";
                }
                sql2 += " order by u.bm,nlssort(u.username,'NLS_SORT=SCHINESE_PINYIN_M')";
            }
            return sql2;
        }

        public String monthlyCheck(Map<String, Object> map){
            String username = String.valueOf(map.get("username")).replaceAll("'","''");
            String department = String.valueOf(map.get("department")).replaceAll("'","''");
            String time = String.valueOf(map.get("time")).replaceAll("'","''");
            String tj = "";
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            if (username != null && !username.isEmpty() && !"null".equals(username) && username.length() > 0) {
                tj += " and u.USERNAME like '%" + username + "%'";
            }
            if (department != null && !department.isEmpty() && !"null".equals(department) && department.length() > 0) {
                tj += " and u.bm = '" + department + "'";
            }
            String sql = "";
            int maxDate = 0;
            if (time != null && !time.isEmpty() && !"null".equals(time) && time.length() > 0) {
                String[] year_month = time.split("-");
                Calendar cal = Calendar.getInstance();
                int year = Integer.parseInt(year_month[0]);
                int month = Integer.parseInt(year_month[1]) - 1;
                cal.set(Calendar.YEAR, year);
                cal.set(Calendar.MONTH, month);
                cal.set(Calendar.DATE, 1);
                cal.roll(Calendar.DATE, -1);
                maxDate = cal.get(Calendar.DATE);
                sql += "select u.USERID, u.USERNAME";
                for (int i = 1; i <= maxDate; i++) {
                    int m = i;
                    sql +=",d" + m + ".qd" + m + ", d" + m + ".qdtime" + m + ", d" + m + ".qt" + m + ", d" + m + ".qttime" + m + ", d" + m + ".qj" + m + " ,d" + m + ".bg" + m ;
                }
                sql +=" from (select  u.USERID, u.USERNAME, u.bm from tuser u where u.lzzt=0";
                sql += tj;
                sql += " ) u";
                for (int i = 1; i <= maxDate; i++) {
                    int m = i;
                    sql += " left join (select distinct u.USERID, s.qd qd" + m + ", to_char(s.QDTIME,'yyyy-MM-dd hh24:mi:ss') qdtime" + m + ", ss.qd qt" + m + ", to_char(ss.QTTIME,'yyyy-MM-dd hh24:mi:ss') qttime" + m + ", q.qjtype qj" + m + " ,to_char(w.BGTIME,'yyyy-MM-dd hh24:mi:ss')  bg" + m + " from tuser u" +
                            " left join tb_bm b on u.bm=b.code " +
                            " left join (select s.*,case when z.sbtime>=to_char(s.QDTIME-1/24/60,'hh24miss') then '正常' else '不正常' end qd from tb_signin s,TB_SZ z, tuser u where s.USERID=u.USERID and u.XXBM=z.XXBM) s" +
                            " on s.USERID=u.USERID and to_char(s.QDTIME,'yyyy-MM-fmdd')='" + time + "-" + m + "'" +
                            " and not exists(select 1 from tb_signin where s.USERID = USERID AND to_char(QDTIME,'yyyy-MM-fmdd')='" + time + "-" + m + "' and s.QDTIME>QDTIME)" +
                            " left join (select ss.*,case when z.xbtime<=to_char(ss.QTTIME,'hh24miss') then '正常' else '不正常' end qd from tb_signout ss,TB_SZ z, tuser u where ss.USERID=u.USERID and u.XXBM=z.XXBM) ss" +
                            " on ss.USERID=u.USERID and to_char(ss.QTTIME,'yyyy-MM-fmdd')='" + time + "-" + m + "'" +
                            " and not exists(select 1 from tb_signout where ss.USERID = USERID AND to_char(QTTIME,'yyyy-MM-fmdd')='" + time + "-" + m + "' and ss.QTTIME<QTTIME)" +
                            " left join TB_QJSC q on q.USERID=u.USERID and to_date('" + time + "-" + m + " 000000','yyyy-MM-fmdd hh24miss')<q.QJJSTIME and to_date('" + time + "-" + m + " 235959','yyyy-MM-fmdd hh24miss')>q.QJKSTIME and q.SQJG=1 " +
                            " and (((q.spuser is not null and q.sqjg=1) or q.spuser is null) and ((q.spuserthree is not null and q.sqjgthree=1) or q.spuserthree is null))"+
                            " and not exists(select 1 from TB_QJSC where q.USERID = USERID AND to_date('" + time + "-" + m + " 000000','yyyy-MM-fmdd hh24miss')<QJJSTIME and to_date('" + time + "-" + m + " 235959','yyyy-MM-fmdd hh24miss')>QJKSTIME and SQJG=1 and q.QJKSTIME<QJKSTIME" +
                            " and (((q.spuser is not null and q.sqjg=1) or q.spuser is null) and ((q.spuserthree is not null and q.sqjgthree=1) or q.spuserthree is null)) )" +
                            " left join TB_WQBGSC w on w.USERID=u.USERID and to_char(w.BGTIME, 'yyyy-MM-fmdd') ='" + time + "-" + m + "'" +
                            " and (((w.spuser is not null and w.sqjg=1) or w.spuser is null) and ((w.spuserthree is not null and w.sqjgthree=1) or w.spuserthree is null))"+
                            " and not exists(select 1 from TB_WQBGSC where w.USERID = USERID AND to_char(BGTIME,'yyyy-MM-fmdd')='" + time + "-" + m + "' and SQJG=1 and w.BGTIME<BGTIME" +
                            " and (((w.spuser is not null and w.sqjg=1) or w.spuser is null) and ((w.spuserthree is not null and w.sqjgthree=1) or w.spuserthree is null)) )" +
                            " where 1=1 ";
                    sql += tj;
                    sql += " ) d" + m + " on u.USERID=d" + m + ".USERID";
                }
                sql += " order by u.bm,nlssort(u.username,'NLS_SORT=SCHINESE_PINYIN_M')";
            }
            return sql;
        }

        public String monthlyFieldWork(Map<String, Object> map){
            String username = String.valueOf(map.get("username")).replaceAll("'","''");
            String department = String.valueOf(map.get("department")).replaceAll("'","''");
            String time = String.valueOf(map.get("time")).replaceAll("'","''");
            String tj = "";
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            if (username != null && !username.isEmpty() && !"null".equals(username) && username.length() > 0) {
                tj += " and u.USERNAME like '%" + username + "%'";
            }
            if (department != null && !department.isEmpty() && !"null".equals(department) && department.length() > 0) {
                tj += " and u.bm = '" + department + "'";
            }
            String sql = "";
            int maxDate = 0;
            if (time != null && !time.isEmpty() && !"null".equals(time) && time.length() > 0) {
                String[] year_month = time.split("-");
                Calendar cal = Calendar.getInstance();
                int year = Integer.parseInt(year_month[0]);
                int month = Integer.parseInt(year_month[1]) - 1;
                cal.set(Calendar.YEAR, year);
                cal.set(Calendar.MONTH, month);
                cal.set(Calendar.DATE, 1);
                cal.roll(Calendar.DATE, -1);
                maxDate = cal.get(Calendar.DATE);
                sql += "select u.USERID, u.USERNAME";
                for (int i = 1; i <= maxDate; i++) {
                    int m = i;
                    sql +=", d" + m + ".swbg" + m + ",d" + m + ".xwbg" + m ;
                }
                sql +=" from (select distinct u.USERID, u.USERNAME, u.bm from tuser u ,TB_WQBGSC w where u.lzzt=0 and u.USERID=w.USERID and to_char(w.BGTIME, 'yyyy-MM')='"+time+"'";
                sql +=" and (((w.spuser is not null and w.sqjg=1) or w.spuser is null) and ((w.spuserthree is not null and w.sqjgthree=1) or w.spuserthree is null))";
                sql += tj;
                sql += " ) u";
                for (int i = 1; i <= maxDate; i++) {
                    int m = i;
                    sql += " left join (select distinct u.USERID, to_char(w.BGTIME,'yyyy-MM-dd hh24:mi:ss') swbg" + m + ", to_char(ww.BGTIME,'yyyy-MM-dd hh24:mi:ss') xwbg" + m + " from tuser u" +
                            " left join tb_bm b on u.bm=b.code " +
                            " left join TB_WQBGSC w on w.USERID=u.USERID and to_date('" + time + "-" + m + " 120000','yyyy-MM-fmdd hh24miss')>w.BGTIME and to_char(w.BGTIME, 'yyyy-MM-fmdd') ='" + time + "-" + m + "'" +
                            " and (((w.spuser is not null and w.sqjg=1) or w.spuser is null) and ((w.spuserthree is not null and w.sqjgthree=1) or w.spuserthree is null))"+
                            " and not exists(select 1 from TB_WQBGSC where w.USERID = USERID and to_date('" + time + "-" + m + " 120000','yyyy-MM-fmdd hh24miss')>w.BGTIME and to_char(BGTIME,'yyyy-MM-fmdd')='" + time + "-" + m + "' and w.BGTIME>BGTIME" +
                            " and (((w.spuser is not null and w.sqjg=1) or w.spuser is null) and ((w.spuserthree is not null and w.sqjgthree=1) or w.spuserthree is null)) )" +
                            " left join TB_WQBGSC ww on ww.USERID=u.USERID and to_date('" + time + "-" + m + " 120000','yyyy-MM-fmdd hh24miss')<=ww.BGTIME and to_char(ww.BGTIME, 'yyyy-MM-fmdd') ='" + time + "-" + m + "'" +
                            " and (((ww.spuser is not null and ww.sqjg=1) or ww.spuser is null) and ((ww.spuserthree is not null and ww.sqjgthree=1) or ww.spuserthree is null))"+
                            " and not exists(select 1 from TB_WQBGSC where ww.USERID = USERID  and to_date('" + time + "-" + m + " 120000','yyyy-MM-fmdd hh24miss')<=ww.BGTIME and to_char(BGTIME,'yyyy-MM-fmdd')='" + time + "-" + m + "' and ww.BGTIME<BGTIME" +
                            " and (((ww.spuser is not null and ww.sqjg=1) or ww.spuser is null) and ((ww.spuserthree is not null and ww.sqjgthree=1) or ww.spuserthree is null)))" +
                            " where 1=1 ";
                    sql += tj;
                    sql += " ) d" + m + " on u.USERID=d" + m + ".USERID";
                }
                sql += " order by u.bm,nlssort(u.username,'NLS_SORT=SCHINESE_PINYIN_M')";
            }
            return sql;
        }

        public String findAppUser(Map<String, Object> map){
            String xxbm = String.valueOf(map.get("xxbm")).replaceAll("'","''");
            String username = String.valueOf(map.get("username")).replaceAll("'","''");
            String lzzt = String.valueOf(map.get("lzzt")).replaceAll("'","''");
            String tj="";
            if(username!=null&&!username.isEmpty()&&!"null".equals(username) &&username.length()>0){
                tj += " and a.username like '%"+username+"%'";
            }
            if(xxbm!=null&&!xxbm.isEmpty()&&!"null".equals(xxbm) &&xxbm.length()>0){
                tj += " and a.xxbm like '%"+xxbm+"%'";
            }
            if(lzzt!=null&&!lzzt.isEmpty()&&!"null".equals(lzzt) &&lzzt.length()>0){
                tj += " and a.lzzt like '%"+lzzt+"%'";
            }
            String sql = "select a.* from tuser a" +
                    " where 1=1";
            sql += tj;
            sql +=" order by a.username";
            return sql;
        }
    }
}
