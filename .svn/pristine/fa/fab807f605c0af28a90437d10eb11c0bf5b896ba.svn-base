package com.twkj.service;

import com.twkj.dao.UserDao;
import com.twkj.helper.JacksonUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.servlet.http.HttpServletRequest;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * @author: xianlehuang
 * @Description:
 * @date: 2019/12/4 - 10:18
 */
@Service
public class UserService {
    @Autowired
    private UserDao userDao;

    private JacksonUtil jacksonUtil = JacksonUtil.buildNormalBinder();

    public String power(HttpServletRequest request) {
        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
        try {
            list = userDao.power();
        }catch (Exception e){
            return jacksonUtil.toJson(list);
        }
        return jacksonUtil.toJson(list);
    }

    public String login(HttpServletRequest request) {
        String loginname = request.getParameter("loginname")==null?"":request.getParameter("loginname");
        String password = request.getParameter("password")==null?"":request.getParameter("password");
        Map<String,Object> map = new HashMap<String,Object>();
        map.put("loginname",loginname);
        map.put("password",password);
        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
        try {
            list = userDao.login(map);
        }catch (Exception e){
            return jacksonUtil.toJson(list);
        }
        if(list.size()==1){
            request.getSession().setAttribute("userid", list.get(0).get("USERID"));
            request.getSession().setAttribute("username", list.get(0).get("USERNAME"));
            request.getSession().setAttribute("post_name", list.get(0).get("POST_NAME"));
            request.getSession().setAttribute("power_name", list.get(0).get("POWER_NAME"));
            request.getSession().setAttribute("power_id", list.get(0).get("POWER_ID"));
            request.getSession().setAttribute("list", list);
        }
        return jacksonUtil.toJson(list);
    }


    public String index(HttpServletRequest request) {
        List<Map<String, Object>> list = (List<Map<String, Object>>) request.getSession().getAttribute("list");
        return jacksonUtil.toJson(list);
    }

    public String findPost(HttpServletRequest request) {
        String post_name = request.getParameter("post_name")==null?"":request.getParameter("post_name");
        String power_id = request.getParameter("power_id")==null?"":request.getParameter("power_id");
        String power_name = request.getParameter("power_name")==null?"":request.getParameter("power_name");
        Map<String,Object> map = new HashMap<String,Object>();
        map.put("post_name",post_name);
        map.put("power_id",power_id);
        map.put("power_name",power_name);
        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
        try {
            list = userDao.findPost(map);
        }catch (Exception e){
            return jacksonUtil.toJson(list);
        }
        return jacksonUtil.toJson(list);
    }

    public String addPost(HttpServletRequest request) {
        String post_name = request.getParameter("post_name")==null?"":request.getParameter("post_name");
        String power_id = request.getParameter("power_id")==null?"":request.getParameter("power_id");
        String power_name = request.getParameter("power_name")==null?"":request.getParameter("power_name");
        Map<String,Object> map = new HashMap<String,Object>();
        map.put("post_name",post_name);
        map.put("power_id",power_id);
        map.put("power_name",power_name);
        int count =0;
        try {
            count = userDao.addPost(map);
        }catch (Exception e){
            count =0;
        }
        return jacksonUtil.toJson(count);
    }

    public String updatePost(HttpServletRequest request) {
        String post_name = request.getParameter("post_name")==null?"":request.getParameter("post_name");
        String power_id = request.getParameter("power_id")==null?"":request.getParameter("power_id");
        String power_name = request.getParameter("power_name")==null?"":request.getParameter("power_name");
        String id = request.getParameter("id")==null?"":request.getParameter("id");
        Map<String,Object> map = new HashMap<String,Object>();
        map.put("post_name",post_name);
        map.put("power_id",power_id);
        map.put("power_name",power_name);
        map.put("id",id);
        int count =0;
        try {
            count = userDao.updatePost(map);
        }catch (Exception e){
            count =0;
        }
        return jacksonUtil.toJson(count);
    }

    public String deletePost(HttpServletRequest request) {
        String id = request.getParameter("id")==null?"":request.getParameter("id");
        Map<String,Object> map = new HashMap<String,Object>();
        map.put("id",id);
        int count =0;
        try {
            count = userDao.deletePost(map);
        }catch (Exception e){
            count =0;
        }
        return jacksonUtil.toJson(count);
    }

    public String findUser(HttpServletRequest request) {
        String department = request.getParameter("department")==null?"":request.getParameter("department");
        String username = request.getParameter("username")==null?"":request.getParameter("username");
        Map<String,Object> map = new HashMap<String,Object>();
        map.put("department",department);
        map.put("username",username);
        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
        try {
            list = userDao.findUser(map);
        }catch (Exception e){
            return jacksonUtil.toJson(list);
        }
        return jacksonUtil.toJson(list);
    }

    public String addUser(HttpServletRequest request) {
        String department = request.getParameter("department")==null?"":request.getParameter("department");
        String username = request.getParameter("username")==null?"":request.getParameter("username");
        String password = request.getParameter("password")==null?"":request.getParameter("password");
        String post_id = request.getParameter("post_id")==null?"":request.getParameter("post_id");
        String loginname = request.getParameter("loginname")==null?"":request.getParameter("loginname");
        Map<String,Object> map = new HashMap<String,Object>();
        map.put("department",department);
        map.put("username",username);
        map.put("password",password);
        map.put("post_id",post_id);
        map.put("loginname",loginname);
        int count =0;
        try {
            count = userDao.addUser(map);
        }catch (Exception e){
            count =0;
        }
        return jacksonUtil.toJson(count);
    }

    public String updateUser(HttpServletRequest request) {
        String department = request.getParameter("department")==null?"":request.getParameter("department");
        String username = request.getParameter("username")==null?"":request.getParameter("username");
        String password = request.getParameter("password")==null?"":request.getParameter("password");
        String post_id = request.getParameter("post_id")==null?"":request.getParameter("post_id");
        String loginname = request.getParameter("loginname")==null?"":request.getParameter("loginname");
        String id = request.getParameter("id")==null?"":request.getParameter("id");
        Map<String,Object> map = new HashMap<String,Object>();
        map.put("department",department);
        map.put("username",username);
        map.put("password",password);
        map.put("post_id",post_id);
        map.put("loginname",loginname);
        map.put("id",id);
        int count =0;
        try {
            count = userDao.updateUser(map);
        }catch (Exception e){
            count =0;
        }
        return jacksonUtil.toJson(count);
    }

    public String deleteUser(HttpServletRequest request) {
        String id = request.getParameter("id")==null?"":request.getParameter("id");
        Map<String,Object> map = new HashMap<String,Object>();
        map.put("id",id);
        int count =0;
        try {
            count = userDao.deleteUser(map);
        }catch (Exception e){
            count =0;
        }
        return jacksonUtil.toJson(count);
    }

    public String findDaily(String username, String department, String time, String type) {
        Map<String,Object> map = new HashMap<String,Object>();
        map.put("username",username);
        map.put("department",department);
        map.put("time",time);
        int maxDate=0;
        Map<String, Object> resultMap= new HashMap<String, Object>();
        if (time != null && !time.isEmpty() && !time.equals("null") && time.length() > 0) {
            String[] year_month = time.split("-");
            Calendar cal = Calendar.getInstance();
            int year = Integer.parseInt(year_month[0]);
            int month = Integer.parseInt(year_month[1]) - 1;
            cal.set(Calendar.YEAR, year);
            cal.set(Calendar.MONTH, month);
            cal.set(Calendar.DATE, 1);
            cal.roll(Calendar.DATE, -1);
            maxDate = cal.get(Calendar.DATE);
        }
        List<Map<String, Object>> list1 = new ArrayList<Map<String, Object>>();
        List<Map<String, Object>> list2 = new ArrayList<Map<String, Object>>();
        try {
            list1 = userDao.findDaily1(map);
            list2 = userDao.findDaily2(map);
            List<String> dateList=findHoliday(time.replace("-",""),maxDate);
            if("1".equals(type)){
                resultMap.put("list2",handle(list2, list1, maxDate, time, dateList));
                resultMap.put("list1", handle(list1, list2, maxDate, time, dateList));
            }else if("2".equals(type)){
                resultMap.put("list1", handle(list1, list2, maxDate, time, dateList));
                resultMap.put("list2",handle(list2, list1, maxDate, time, dateList));
            }
            return jacksonUtil.toJson(resultMap);

        }catch (Exception e){
            return jacksonUtil.toJson(resultMap);
        }
    }

    private List<Map<String, Object>> handle(List<Map<String, Object>> list, List<Map<String, Object>> other, Integer maxDate, String time, List<String> dateList) {
        String[] a={"事假","病假","婚假","年休假","调休假","妊娠假","陪产假","探亲假","其他"};
        List<String> leave = Arrays.asList(a);
        for(int i=0;i<list.size();i++){
            float cq = 0,sj = 0,bj=0,hj=0,nj=0,txj=0,rsj=0,pcj=0,tqj=0,qj=0,jjr=0,qt=0,kg=0;
            String day="";
            for(int m=1;m<=maxDate;m++){
                String item=String.valueOf(list.get(i).get("QJ"+m));
                String item2=String.valueOf(other.get(i).get("QJ"+m));
                if(m<10){
                    day = time.replace("-","")+"0"+m;
                }else{
                    day = time.replace("-","")+m;
                }

                if(leave.indexOf(item)==0||leave.indexOf(item2)==0){
                    if(leave.indexOf(item)==0){
                        sj += 0.5;
                        list.get(i).put("KQTB"+m,"⚪");
                    }
                    if(leave.indexOf(item2)==0){
                        sj += 0.5;
                    }
                }else if(leave.indexOf(item)==1||leave.indexOf(item2)==1){
                    if(leave.indexOf(item)==1){
                        bj += 0.5;
                        list.get(i).put("KQTB"+m,"▲");
                    }
                    if(leave.indexOf(item2)==1){
                        bj += 0.5;
                    }
                }else if(leave.indexOf(item)==2||leave.indexOf(item2)==2){
                    if(leave.indexOf(item)==2){
                        hj += 0.5;
                        list.get(i).put("KQTB"+m,"婚");
                    }
                    if(leave.indexOf(item2)==2){
                        hj += 0.5;
                    }
                }else if(leave.indexOf(item)==3||leave.indexOf(item2)==3){
                    if(leave.indexOf(item)==3){
                        nj += 0.5;
                        list.get(i).put("KQTB"+m,"年");
                    }
                    if(leave.indexOf(item2)==3){
                        nj += 0.5;
                    }
                }else if(leave.indexOf(item)==4||leave.indexOf(item2)==4){
                    if(leave.indexOf(item)==4){
                        txj += 0.5;
                        list.get(i).put("KQTB"+m,"L");
                    }
                    if(leave.indexOf(item2)==4){
                        txj += 0.5;
                    }
                }else if(leave.indexOf(item)==5||leave.indexOf(item2)==5){
                    if(leave.indexOf(item)==5){
                        rsj += 0.5;
                        list.get(i).put("KQTB"+m,"什");
                    }
                    if(leave.indexOf(item2)==5){
                        rsj += 0.5;
                    }
                }else if(leave.indexOf(item)==6||leave.indexOf(item2)==6){
                    if(leave.indexOf(item)==6){
                        pcj += 0.5;
                        qt += 0.5;
                        list.get(i).put("KQTB"+m,"什");
                    }
                    if(leave.indexOf(item2)==6){
                        pcj += pcj+0.5;
                        qt += qt+0.5;
                    }
                }else if(leave.indexOf(item)==7||leave.indexOf(item2)==7){
                    if(leave.indexOf(item)==7){
                        tqj += 0.5;
                        qt += 0.5;
                        list.get(i).put("KQTB"+m,"什");
                    }
                    if(leave.indexOf(item2)==7){
                        tqj += 0.5;
                        qt += 0.5;
                    }
                }else if(leave.indexOf(item)==8||leave.indexOf(item2)==8){
                    if(leave.indexOf(item)==8){
                        qj += 0.5;
                        qt += 0.5;
                        list.get(i).put("KQTB"+m,"什");
                    }
                    if(leave.indexOf(item2)==8){
                        qj += 0.5;
                        qt += 0.5;
                    }
                }

                if(!item.equals("null")){
                    list.get(i).put("KQ"+m,item);
                }else if(!String.valueOf(list.get(i).get("JB"+m)).equals("null")){
                    cq +=0.5;
                    list.get(i).put("KQ"+m,"加班");
                    list.get(i).put("KQTB"+m,"●");
                }else if(!String.valueOf(list.get(i).get("BG"+m)).equals("null")){
                    cq +=0.5;
//                    list.get(i).put("KQ"+m,"外勤");
                    list.get(i).put("KQ"+m,"出勤");
                    list.get(i).put("KQTB"+m,"/");
                }else if(!String.valueOf(list.get(i).get("QD"+m)).equals("null")){
                    cq +=0.5;
//                    cq ++;
                    if(String.valueOf(list.get(i).get("QD"+m)).equals("正常")){
                        list.get(i).put("KQ"+m,"出勤");
                        list.get(i).put("KQTB"+m,"/");
                    }else if(String.valueOf(list.get(i).get("QD"+m)).equals("不正常")){
                        list.get(i).put("KQ"+m,"迟到/早退");
                        list.get(i).put("KQTB"+m,"*");
                    }
                }else if(compare_date(day) == 1){
                    list.get(i).put("KQ"+m,"");
                    list.get(i).put("KQTB"+m,"");
                }else{
                    if(dateList.indexOf(day)>-1){
                        list.get(i).put("KQ"+m,"节假日");
                        list.get(i).put("KQTB"+m,"节");
                        jjr ++;
                    }else{
                        list.get(i).put("KQ"+m,"旷工");
                        list.get(i).put("KQTB"+m,"×");
                        kg += 0.5;
                    }
                }
            }
            if(String.valueOf(list.get(i).get("TYPE")).equals("1")){
                list.get(i).put("TYPE","上午");
            }else if(String.valueOf(list.get(i).get("TYPE")).equals("2")){
                list.get(i).put("TYPE","下午");
            }
            list.get(i).put("CQ",cq+Float.parseFloat(String.valueOf(other.get(i).get("CQ")).equals("null")?"0":String.valueOf(other.get(i).get("CQ"))));
            list.get(i).put("SJ",sj);
            list.get(i).put("BJ",bj);
            list.get(i).put("HJ",hj);
            list.get(i).put("NJ",nj);
            list.get(i).put("TXJ",txj);
            list.get(i).put("JJR",jjr);
            list.get(i).put("KG",kg+Float.parseFloat(String.valueOf(other.get(i).get("KG")).equals("null")?"0":String.valueOf(other.get(i).get("KG"))));
            list.get(i).put("QT",qt);
            //加班
            list.get(i).put("JB","");
//            list.get(i).put("RSJ",rsj);
//            list.get(i).put("PCJ",pcj);
//            list.get(i).put("TQJ",tqj);
            list.get(i).put("QJ",qj+rsj+pcj+tqj);
        }
        return list;
    }
    private List<String> findHoliday(String time, Integer maxDate) {
        Map<String,Object> map = new HashMap<String,Object>();
        map.put("time",time);
        map.put("maxDate",maxDate);
        List<Map<String, Object>> listQuery = new ArrayList<Map<String, Object>>();
        List<String> list =new ArrayList<String>();
        try {
            listQuery = userDao.findHoliday(map);
            if(listQuery.size()>0){
                for(int i=0;i<listQuery.size();i++){
                    list.add(String.valueOf(listQuery.get(i).get("DAY")));
                }
            }
        }catch (Exception e){
            return list;
        }
        return list;
    }

    private int compare_date(String s) {
        DateFormat df = new SimpleDateFormat("yyyyMMdd");
        try {
            Date dt = df.parse(s);
            if (dt.getTime() >= System.currentTimeMillis()) {
                return 1;
            } else {
                return 0;
            }
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        return 0;
    }

    public String getDepartment() {
        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
        try {
            list = userDao.getDepartment();
        }catch (Exception e){
            return jacksonUtil.toJson(list);
        }
        return jacksonUtil.toJson(list);
    }
}
